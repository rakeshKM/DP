/* Dynamic Programming C/C++ implementation of LIS problem */
#include<stdio.h>
#include<stdlib.h>

/* lis() returns the length of the longest increasing
subsequence in arr[] of size n */
int lis( int arr[], int N )
{
int DP[N],prev[N];
    int maxLength = 1, bestEnd = 0;
DP[0] = 1;
prev[0] = -1;

    for (int i = 1; i < N; i++)
    {
       DP[i] = 1;
       prev[i] = -1;
    
       for (int j = i - 1; j >= 0; j--)
          if (DP[j] + 1 > DP[i] && arr[j] < arr[i])
          {
             DP[i] = DP[j] + 1;
             prev[i] = j;
          }
    
       if (DP[i] > maxLength)
       {
          bestEnd = i;
          maxLength = DP[i];
       }
    }
 
 
 for (int i = 0; i < N; i++)
    {printf("%d ",DP[i]);}
    
      printf("\n ");  
        
    printf("%d ",arr[bestEnd]);
    int res = maxLength-1;
    for(int i=bestEnd-1;i>=0;i--){
       
        if(DP[i]==res){
				printf("%d ",arr[i]);
				res--;
			}		
    }
    
	return maxLength;
}

/* Driver program to test above function */
int main()
{
	int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 };
	int n = sizeof(arr)/sizeof(arr[0]);
	printf("Length of lis is %d\n", lis( arr, n ) );
	return 0;
}
